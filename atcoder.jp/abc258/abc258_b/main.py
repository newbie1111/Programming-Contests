#!/usr/bin/env python3
# from typing import *

# from icecream import ic


# def solve(N: str, A: List[List[str]]) -> int:
def solve(N, A):
    ans = 0
    for i in range(N):
        for j in range(N):
            # ic(i, j)
            # ic(eight_directions_index((i, j), N))
            # ic(eight_directions_numbers(A, (i, j), N))
            ans = max(ans, max(eight_directions_numbers(A, (i, j), N)))
    return ans


def eight_directions_numbers(A, now, N):
    return [int("".join([A[i][j] for i, j in directions])) for directions in eight_directions_index(now, N)]


def eight_directions_index(now, N):
    n, ne, e, se = [now], [now], [now], [now]
    for _ in range(N - 1):
        n.append(up(n[-1], N))
        ne.append(up(right(ne[-1], N), N))
        e.append(right(e[-1], N))
        se.append(down(right(se[-1], N), N))

    candidate = [n, ne, e, se]
    candidate += [list(reversed(lst)) for lst in candidate]

    return candidate


def up(now: tuple, N: int):
    return (now[0] - 1) % N, now[1]


def down(now: tuple, N: int):
    return (now[0] + 1) % N, now[1]


def right(now: tuple, N: int):
    return now[0], (now[1] + 1) % N


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N = int(input())
    A = [input() for i in range(N)]
    a = solve(N, A)
    print(a)


if __name__ == '__main__':
    main()
