#!/usr/bin/env python3
# from typing import *

from __future__ import annotations
import itertools
from icecream import ic

YES = 'Yes'
NO = 'No'


def corrdinates(S: list[str]):
    return {(x, y) for y, s in enumerate(S) for x, c in enumerate(s) if c == "#"}


def normalize(S: set[tuple[int, int]]):
    mx = min(x for x, _ in S)
    my = min(y for _, y in S)
    return {(x-mx, y-my) for x, y in S}


def trans(S, dx, dy):
    return {(x + dx, y + dy) for x, y in S}

# def solve(n: int, a: List[int]) -> str:


def solve(H, W, A, B, X):
    a = normalize(corrdinates(A))
    b = normalize(corrdinates(B))
    x = normalize(corrdinates(X))

    ic(corrdinates(A), corrdinates(B), corrdinates(X))
    ic(a, b, x)

    for dx, dy in itertools.product(range(-H, H), range(-W, W)):
        ic(trans(b, dx, dy))
        if a | trans(b, dx, dy) == x:
            return YES
    return NO


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)


def main():
    H, W = 0, 0
    A, B, X = [], [], []

    for i in range(3):
        h, w = map(int, input().split())
        H, W = max(H, h), max(W, w)

        if i == 0:
            for _ in range(h):
                A.append(input())
        if i == 1:
            for _ in range(h):
                B.append(input())
        if i == 2:
            for _ in range(h):
                X.append(input())

    print(solve(H, W, A, B, X))


if __name__ == '__main__':
    main()
