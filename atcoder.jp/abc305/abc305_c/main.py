#!/usr/bin/env python3
# from typing import *
from collections import deque, Counter
import itertools
# from icecream import ic
# def solve(H: str, W: str, S: List[List[str]]) -> Tuple[int, int]:


def solve2(H, W, S):
    neibors = [(1, 0), (0, -1), (-1, 0), (0, 1)]

    for i, j in itertools.product(range(H), range(W)):
        dxdy = [(i+dx, j+dy) for dx, dy in neibors
                if 0 <= (i+dx) < H and 0 <= (j + dy) < W]
        # ic(i, j, dxdy)

        if S[i][j] == "." and Counter([S[dx][dy] for dx, dy in dxdy])["#"] >= 2:
            return i+1, j+1


def solve(H, W, S):
    row, col = 0, W
    for s in S:
        if "#" not in s:
            row += 1
        else:
            break
    for s in S:
        if "#" in s:
            col = min(col, s.index("#"))

    grid = [deque(s[col:]) for s in S if "#" in s]
    # ic(S, grid, row, col)

    while True:
        check = []
        for deq in grid:
            check.append(deq.popleft())

        col += 1
        if "." in check:
            row += check.index(".")
            break

    return row+1, col


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)


def main():
    H, W = map(int, input().split())
    S = []
    for _ in range(H):
        S.append(input())

    # a, b = solve(H, W, S)
    a, b = solve2(H, W, S)
    print(a, b)


if __name__ == '__main__':
    main()
