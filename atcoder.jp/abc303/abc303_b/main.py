#!/usr/bin/env python3
# from typing import *

import itertools
from collections import defaultdict
# def solve(N: int, M: int, a: List[List[int]]) -> int:


def solve(N, M, a):
    ddic = defaultdict(lambda: defaultdict(bool))

    for line in a:
        for i in range(len(line)-1):
            x, y = line[i], line[i+1]
            ddic[x, y] = ddic[y, x] = True

    ans = [1 for i, j in itertools.combinations(
        range(1, N+1), 2) if not ddic[i, j]]

    return sum(ans)


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    M = int(next(tokens))
    a = [[None for _ in range(N)] for _ in range(M)]
    for j in range(M):
        for i in range(N):
            a[j][i] = int(next(tokens))
    assert next(tokens, None) is None
    a1 = solve(N, M, a)
    print(a1)


if __name__ == '__main__':
    main()
