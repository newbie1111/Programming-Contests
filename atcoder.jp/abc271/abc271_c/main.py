#!/usr/bin/env python3
# from typing import *

from collections import deque, Counter
import itertools
# from icecream import ic


# def solve(N: int, a: List[int]) -> int:
def solve(N, a):
    ans = 0
    counter = Counter(a)
    names = Counter(counter.keys())
    duplicate = (counter - names)
    dq = deque(itertools.chain(names.elements(), duplicate.elements()))

    while dq:
        # ic(dq, ans)

        if dq[0] == ans + 1:
            ans = dq.popleft()
        elif len(dq) >= 2:
            dq.pop()
            dq.pop()
            ans += 1
        else:
            dq.clear()

        # ic("->", dq, ans)

    return ans


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    a = [None for _ in range(N)]
    for i in range(N):
        a[i] = int(next(tokens))
    assert next(tokens, None) is None
    a1 = solve(N, a)
    print(a1)


if __name__ == '__main__':
    main()