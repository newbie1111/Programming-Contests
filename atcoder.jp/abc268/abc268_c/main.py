#!/usr/bin/env python3
# from typing import *

# from icecream import ic


# def solve(N: int, p: List[int]) -> int:
def solve(N, P):
    ans = 0

    def candidate(p, N):
        return (p - 1) % N, (p + 0) % N, (p + 1) % N

    candidates = [candidate(p, N) for p in P]
    # ic(candidates)

    for head in candidates[0]:
        lst = [(i + head) % N for i in range(N)]
        # ic(lst)
        res = 0

        for v, c in zip(lst, candidates):
            if v in c:
                res += 1

        ans = max(ans, res)

    return ans


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    import sys
    tokens = iter(sys.stdin.read().split())
    N = int(next(tokens))
    P = [None for _ in range(N)]
    for i in range(N):
        P[i] = int(next(tokens))
    assert next(tokens, None) is None
    a = solve(N, P)
    print(a)


if __name__ == '__main__':
    main()
